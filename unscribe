import tkinter as tk
import speech_recognition as sr
import pyttsx3
import threading

# Text-to-Speech Engine
engine = pyttsx3.init()
engine.setProperty('rate', 150)

# Questions
questions = [
    "What is Artificial Intelligence?",
    "Define Machine Learning.",
    "List three applications of AI."
]

answers = {}
current_question_index = 0

# Speak Text
def instruct(text):
    engine.say(text)
    engine.runAndWait()

# Read Question Aloud
def read_question(text):
    engine.say(text)
    engine.runAndWait()

# Get Spoken Answer
def get_answer():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        instruct("Please speak your answer. You have 30 seconds.")
        recognizer.adjust_for_ambient_noise(source, duration=1)
        try:
            audio = recognizer.listen(source, timeout=5, phrase_time_limit=30)
            text = recognizer.recognize_google(audio)
            print("Heard:", text)
            answer_entry.delete("1.0", tk.END)
            answer_entry.insert(tk.END, text)
        except sr.WaitTimeoutError:
            instruct("You didnâ€™t speak in time.")
        except sr.UnknownValueError:
            instruct("Could not understand audio.")
        except sr.RequestError as e:
            instruct("Speech service error.")
            print(f"API Error: {e}")

# Show Question in GUI
def show_question():
    question = questions[current_question_index]
    question_label.config(text=f"Question {current_question_index + 1}: {question}")
    answer_entry.delete("1.0", tk.END)
    root.after(500, lambda: read_question(question))

# Move to Next Question
def next_question():
    global current_question_index
    answer = answer_entry.get("1.0", tk.END).strip()
    if answer:
        answers[f"Question {current_question_index + 1}"] = answer
    else:
        instruct("Please provide an answer before continuing.")
        return

    current_question_index += 1
    if current_question_index < len(questions):
        show_question()
    else:
        finish_exam()

# Finish and Save
def finish_exam():
    with open("exam_answers.txt", "w") as f:
        for q, a in answers.items():
            f.write(f"{q}:\nAnswer: {a}\n\n")
    instruct("All answers saved. Thank you!")
    root.destroy()

# Listen for Voice Commands: "voice answer" or "next"
def voice_command_listener():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)
        while True:
            print("Listening for command (say 'voice answer' or 'next')...")
            try:
                audio = recognizer.listen(source, timeout=5, phrase_time_limit=5)
                command = recognizer.recognize_google(audio).lower()
                print("Command Heard:", command)

                if "voice answer" in command:
                    get_answer()
                elif "next" in command:
                    next_question()
            except sr.WaitTimeoutError:
                continue
            except sr.UnknownValueError:
                continue
            except sr.RequestError:
                instruct("Voice recognition error. Check your connection.")
                break

# Start GUI
def start():
    global root, question_label, answer_entry
    root = tk.Tk()
    root.title("Voice-Based Quiz")
    root.geometry("600x400")

    question_label = tk.Label(root, text="", font=("Helvetica", 16), wraplength=550, justify="left")
    question_label.pack(pady=20)

    answer_entry = tk.Text(root, height=6, width=60, font=("Helvetica", 12))
    answer_entry.pack(pady=10)

    # You may keep buttons for backup
    tk.Button(root, text="Voice Answer", command=get_answer, font=("Helvetica", 12)).pack(pady=5)
    tk.Button(root, text="Next", command=next_question, font=("Helvetica", 14)).pack(pady=10)

    show_question()

    # Start voice command thread
    threading.Thread(target=voice_command_listener, daemon=True).start()

    root.mainloop()

# Main
if __name__ == "__main__":
    start()
